"" .ideavimrc - Matt Chapman

"" Base Settings
"" ========================================================

set scrolloff=10
set relativenumber
set number
set showmode
set showcmd
set smartcase
set incsearch
set hlsearch
set visualbell
set clipboard=unnamedplus 
set commentary "

"" Choosing handlers in conflicting Intellij/IdeaVim keymaps =======
sethandler <C-i> n-v-i:vim
sethandler <C-o> n-v-i:vim
sethandler <C-d> n-v-i:vim
sethandler <C-u> n-v-i:vim
sethandler <C-h> n-v-i:vim
sethandler <C-j> n-v-i:vim
sethandler <C-k> n-v-i:vim
sethandler <C-l> n-v-i:vim

"" Plugin Settings
"" ========================================================

set surround
set highlightedyank
set sneak
set nerdtree
set argtextobj
set multicursor
set ideajoin
set ideamarks
set quickscope

" Easymotion settings
set easymotion
set notimeout

" Buffer navigation
sethandler <c-h> a:vim
sethandler <c-l> a:vim
sethandler <c-j> a:vim
sethandler <c-k> a:vim
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k

" Set the leader key (commonly set to space)
let mapleader = " "

" Which-key settings
set which-key
let g:WhichKey_FontSize = 16
let g:WhichKey_CommandColor = "#89b4fa"
let g:WhichKey_PrefixColor = "#a6e3a1"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKeyDesc_leader = "<leader> Leader key"
let g:WhichKeyDesc_easymotion_prefix = "<leader><leader>"
let g:WhichKeyDesc_file_quickLook = "<leader><leader> Recent files"

"" Key mappings
"" ========================================================

" Override Ctrl + u to scroll up and center the screen
nmap <C-u> <C-u>zz
" Override Ctrl + d to scroll down and center the screen
nmap <C-d> <C-d>zz

" Tab navigation
nnoremap <A-n> :tabnext<CR>
nnoremap <A-p> :tabprev<CR>

" Pane navigation
nnoremap <A-h> <C-w>h
nnoremap <A-l> <C-w>l
nnoremap <A-k> <C-w>k
nnoremap <A-j> <C-w>j

" Jump between methods
nnoremap [[ <Action>(MethodUp)
nnoremap ]] <Action>(MethodDown)

" Easy visual indentation
vnoremap < <gv
vnoremap > >gv

" Execute macro saved in 'q' register
nnoremap qj @q

" Popup navigation
inoremap <C-j> <Action>(PopupMenu-selectNext)
inoremap <C-k> <Action>(PopupMenu-selectPrev)

"" Leader commands
"" ========================================================

" Jump around with easymotion
let g:WhichKeyDesc_easymotion = "<leader>j Jump with Easymotion"
map <leader>j <Plug>(easymotion-s)

" Open NERDTree (use q to exit)
" let g:WhichKeyDesc_leader = "<leader>tf Open file explorer"
" map <leader>tf :NERDTreeToggle<CR>

autocmd FileType nerdtree map <buffer> r <Action>(RenameElement)

" Folding
let g:WhichKeyDesc_fold = "<leader>z Folding"

let g:WhichKeyDesc_fold_all = "<leader>zc Fold all regions"
map <leader>zc :action CollapseAllRegions<CR>
let g:WhichKeyDesc_unfold_all = "<leader>zo Unfold all regions"
map <leader>zo :action ExandAllRegions<CR>

" Window splits
let g:WhichKeyDesc_window = "<leader>w Window splits"

let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"
map <leader>ws <Action>(SplitHorizontally)
map <leader>wu <Action>(Unsplit)
map <leader>wm <Action>(MoveEditorToOppositeTabGroup)
let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"
map <leader>wv <Action>(SplitVertically)
let g:WhichKeyDesc_window_split_horizontally = "<leader>wh Split horizontally"
map <leader>ws <Action>(SplitHorizontally)
let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
map <leader>wu <Action>(Unsplit)
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"
map <leader>wm <Action>(MoveEditorToOppositeTabGroup)

" Debug
let g:WhichKeyDesc_leader_debug = "<leader>d Debug actions"

let g:WhichKeyDesc_debug_debug = "<leader>de Debug"
map <leader>de :action Debug<cr>
let g:WhichKeyDesc_debug_choosedebug = "<leader>dE Choose debug"
map <leader>dE :action ChooseDebugConfiguration<cr>
let g:WhichKeyDesc_debug_run = "<leader>dr Run"
map <leader>dr :action Run<cr>
let g:WhichKeyDesc_debug_chooserun = "<leader>dR Choose run"
map <leader>dR :action ChooseRunConfiguration<cr>
let g:WhichKeyDesc_debug_stop = "<leader>dk Stop (Kill)"
map <leader>dk :action Stop<cr>
let g:WhichKeyDesc_debug_togglelinebreakpoint = "<leader>db Toggle breakpoint"
map <leader>db :action ToggleLineBreakpoint<cr>
let g:WhichKeyDesc_debug_muteallbreakpoints = "<leader>dm Mute All breakpoints"
map <leader>dm :action XDebugger.MuteBreakpoints<cr>
let g:WhichKeyDesc_debug_removeallbreakpoints = "<leader>dd Remove all breakpoints"
map <leader>dd :action Debugger.RemoveAllBreakpoints<cr>
let g:WhichKeyDesc_debug_showbreakpoints = "<leader>ds Show all breakpoints"
map <leader>ds :action ViewBreakpoints<cr>
let g:WhichKeyDesc_debug_stepover = "<leader>dv Step oVer"
map <leader>dv :action StepOver<cr>
let g:WhichKeyDesc_debug_stepinto = "<leader>di Step into"
map <leader>di :action StepInto<cr>e
let g:WhichKeyDesc_debug_stepout = "<leader>do Step Out"
map <leader>do :action StepOut<cr>
let g:WhichKeyDesc_debug_continue = "<leader>dc Continue"
map <leader>dc :action Resume<cr>
let g:WhichKeyDesc_debug_quickevaluate = "<leader>dx Evaluate selected expression"
map <leader>dx :action QuickEvaluateExpression<cr>
let g:WhichKeyDesc_debug_evaluate = "<leader>dt EvaluaTe expression"
map <leader>dt :action EvaluateExpression<cr>
let g:WhichKeyDesc_debug_watch = "<leader>dw Add to watch"
map <leader>dw :action Debugger.AddToWatch<cr>

" Finder (leader f)
let g:WhichKeyDesc_leader_finder = "<leader>f Finder actions"

let g:WhichKeyDesc_finder_class = "<leader>fe Find class"
map <leader>fe :action GotoClass<cr>
let g:WhichKeyDesc_finder_file = "<leader>fn Find files (Name)"
map <leader>fn :action GotoFile<cr>
let g:WhichKeyDesc_finder_projects = "<leader>fp Find recent projects"
map <leader>fp :action ManageRecentProjects<cr>
let g:WhichKeyDesc_finder_actions = "<leader>fa Find actions"
map <leader>fa :action GotoAction<cr>
let g:WhichKeyDesc_finder_grep = "<leader>fg Find in files (Grep)"
map <leader>fg :action FindInPath<cr>
let g:WhichKeyDesc_finder_history = "<leader>fh Find recent files (History)"
map <leader>fh :action RecentFiles<cr>
let g:WhichKeyDesc_finder_location = "<leader>fm Find recent locations (Marks)"
map <leader>fm :action RecentLocations<cr>
let g:WhichKeyDesc_finder_symbol = "<leader>fs Find symbol"
map <leader>fs :action GotoSymbol<cr>
let g:WhichKeyDesc_finder_find = "<leader>fd Find in current file"
map <leader>fd :action Find<cr>
let g:WhichKeyDesc_finder_replace = "<leader>fr Find and replace in current file <Ctrl-r>"
map <leader>fr :action Replace<cr>
let g:WhichKeyDesc_finder_replaceinfiles = "<leader>fR Find and replace in files"
map <leader>fR :action ReplaceInPath<cr>
let g:WhichKeyDesc_finder_clipboard = "<leader>fx Find in clipboard"
map <leader>fx :action PasteMultiple<cr>

" Views (leader v)
let g:WhichKeyDesc_leader_views = "<leader>v View actions"

let g:WhichKeyDesc_views_project = "<leader>vf Project view (Files)"
map <leader>vf :action ActivateProjectToolWindow<cr>
let g:WhichKeyDesc_views_problems = "<leader>vp Problems and diganostics view"
map <leader>vp :action ActivateProblemsViewToolWindow<cr>
let g:WhichKeyDesc_views_structure = "<leader>vs Structure view"
map <leader>vs :action ActivateStructureToolWindow<cr>
let g:WhichKeyDesc_views_terminal = "<leader>vt Terminal"
map <leader>vt :action ActivateTerminalToolWindow<cr>
let g:WhichKeyDesc_views_services = "<leader>vv Services view"
map <leader>vv :action ActivateServicesToolWindow<cr>
let g:WhichKeyDesc_views_debug = "<leader>vd Debug view"
map <leader>vd :action ActivateDebugToolWindow<cr>
let g:WhichKeyDesc_views_git = "<leader>vg Git view"
map <leader>vg :action ActivateVersionControlToolWindow<cr>
let g:WhichKeyDesc_views_todo = "<leader>vo TODO view"
map <leader>vo :action ActivateTODOToolWindow<cr>
let g:WhichKeyDesc_views_copilotchat = "<leader>vc Copilot chat"
map <leader>vc :action ActivateGitHubCopilotChatToolWindow<cr>
let g:WhichKeyDesc_views_close = "<leader>vq Close view"
map <leader>vq :action CloseActiveTab<cr>

" Code navigation (leader c)
let g:WhichKeyDesc_leader_code = "<leader>c Code actions"

let g:WhichKeyDesc_code_gotodeclaration = "<leader>cd Go to declaration"
nnoremap <leader>cd :action GotoDeclaration<cr>
let g:WhichKeyDesc_code_gototypedeclaration = "<leader>ct Go to type declaration"
nnoremap <leader>ct :action GotoTypeDeclaration<cr>
let g:WhichKeyDesc_code_gotoimplementation = "<leader>ci Go to implementation"
nnoremap <leader>ci :action GotoImplementation<cr>
let g:WhichKeyDesc_code_gotosupermethod = "<leader>cs Go to super method"
nnoremap <leader>cs :action GotoSuperMethod<cr>
let g:WhichKeyDesc_code_gotousages = "<leader>cr Show usages (References)"
nnoremap <leader>cr :action ShowUsages<cr>
let g:WhichKeyDesc_code_highlightusages = "<leader>cu Highlight usages in file"
nnoremap <leader>cu :action HighlightUsagesInFile<cr>
let g:WhichKeyDesc_code_doc = "<leader>cv Show docs (hooVer)"
nnoremap <leader>cv :action QuickJavaDoc<cr>
let g:WhichKeyDesc_code_callhierarchy = "<leader>cc Show call hierarchy"
nnoremap <leader>cc :action CallHierarchy<CR>  
let g:WhichKeyDesc_code_navbar = "<leader>cn Show navigation bar"
nnoremap <leader>cn :action ShowNavBar<CR>
let g:WhichKeyDesc_code_filestructure = "<leader>cx Show file structure"
nnoremap <leader>cx :action FileStructurePopup<CR> 
let g:WhichKeyDesc_code_build = "<leader>cb Build"
nnoremap <leader>cb :action CompileDirty<CR> 
let g:WhichKeyDesc_code_mavenrefresh = "<leader>cm Refresh Maven dependencies"
nnoremap <leader>cm :action ExternalSystem.ProjectRefreshAction<CR> 
let g:WhichKeyDesc_code_parameterinfo = "<leader>cp Parameter info"
nnoremap <leader>cp :action ParameterInfo<CR> 

" Refactoring (leader r)
let g:WhichKeyDesc_leader_refactor = "<leader>r Refactoring actions"

let g:WhichKeyDesc_refactor_showactions = "<leader>re Show actions"
map <leader>re :action Refactorings.QuickListPopupAction<CR>
let g:WhichKeyDesc_refactor_renameelement = "<leader>rn Rename element"
map <leader>rn :action RenameElement<cr>
let g:WhichKeyDesc_refactor_introducevariable = "<leader>rv Introduce variable"
map <leader>rv :action IntroduceVariable<cr>
let g:WhichKeyDesc_refactor_introduceconstant = "<leader>rc Introduce constant"
map <leader>rc :action IntroduceConstant<cr>
let g:WhichKeyDesc_refactor_introducefield = "<leader>rf Introduce field"
map <leader>rf :action IntroduceField<cr>
let g:WhichKeyDesc_refactor_introduceparameter = "<leader>rp Introduce parameter"
map <leader>rp :action IntroduceParameter<cr>
let g:WhichKeyDesc_refactor_extractmethod = "<leader>rx Extract method"
map <leader>rx :action ExtractMethod<cr>
let g:WhichKeyDesc_refactor_formatcode = "<leader>rf Format code"
map <leader>rf :action ReformatCode<cr>:action RearrangeCode<cr>:action OptimizeImports<cr>
let g:WhichKeyDesc_refactor_optimizeimports = "<leader>ro Optmize imports"
map <leader>ro :action OptimizeImports<cr>
let g:WhichKeyDesc_refactor_inline = "<leader>ri Inline"
map <leader>ri :action Inline<cr>
let g:WhichKeyDesc_refactor_changesignature = "<leader>rs Change signature"
map <leader>rs :action ChangeSignature<cr>
let g:WhichKeyDesc_refactor_anonymoustoinner = "<leader>ra Convert anonymous to inner"
map <leader>ra :action AnonymousToInner<cr>
let g:WhichKeyDesc_refactor_move = "<leader>rm Move"
map <leader>rm :action Move<cr>

" Source generation (leader s)
let g:WhichKeyDesc_leader_source = "<leader>s Source generation actions"

let g:WhichKeyDesc_source_actions = "<leader>sa Show source generation actions"
nnoremap <leader>sa :action Generate<CR>
let g:WhichKeyDesc_source_constructor = "<leader>sc Generate constructor"
nnoremap <leader>sc :action GenerateConstructor<cr>
let g:WhichKeyDesc_source_gettersetter = "<leader>sg Generate getters and setters"
nnoremap <leader>sg :action GenerateGetterAndSetter<cr>
let g:WhichKeyDesc_source_equals = "<leader>se Generate equals and hashCode"
nnoremap <leader>se :action GenerateEquals<cr>
let g:WhichKeyDesc_source_override = "<leader>so Override methods"
nnoremap <leader>so :action OverrideMethods<cr>
let g:WhichKeyDesc_source_new_class= "<leader>sn New Class" 
nnoremap <leader>sn :action NewClass<cr>
let g:WhichKeyDesc_source_new_file= "<leader>sf New File" 
nnoremap <leader>sf :action NewFile<cr>

" Git (leader g)
let g:WhichKeyDesc_leader_git = "<leader>g Git actions"

let g:WhichKeyDesc_leader_diff = "<leader>gd Show differences"
map <leader>gd :action Compare.LastVersion<cr>
let g:WhichKeyDesc_leader_nextdiff = "<leader>gn Next difference"
map <leader>gn :action NextDiff<cr>
let g:WhichKeyDesc_leader_previousdiff = "<leader>gp Previous difference"
map <leader>gp :action PreviousDiff<cr>
let g:WhichKeyDesc_leader_checkinproject= "<leader>gb Open Git branches list"
map <leader>gc <Action>(CheckinProject)
let g:WhichKeyDesc_git_branches = "<leader>gb Open Git branches list"
map <leader>gb <Action>(Git.Branches)

" Errors and diagnostics (leader e)
let g:WhichKeyDesc_errors = "<leader>e Error navigation"

let g:WhichKeyDesc_error_next = "<leader>en Go to next error"
map <leader>en :action GotoNextError<cr>
let g:WhichKeyDesc_error_previous = "<leader>ep Go to previous error"
map <leader>ep :action GotoPreviousError<cr>
let g:WhichKeyDesc_error_description = "<leader>ed Show error description"
map <leader>ed :action ShowErrorDescription<cr>

" Display Modes (leader m)
let g:WhichKeyDesc_leader_display = "<leader>m Display modes"

let g:WhichKeyDesc_display_distractionfreemode = "<leader>md Toggle distraction free mode"
map <leader>md :action ToggleDistractionFreeMode<cr>
let g:WhichKeyDesc_display_zenmode = "<leader>mz Toggle Zen mode"
map <leader>mz :action ToggleZenMode<cr>
let g:WhichKeyDesc_display_fullscreen = "<leader>mf Toggle full screen"
map <leader>mf :action ToggleFullScreen<cr>

" Folds (leader z)
let g:WhichKeyDesc_leader_folds= "<leader>z Folds"

let g:WhichKeyDesc_fold_collapseall = "| Collapse all folds"
nnoremap zc :action CollapseAllRegions<cr>
let g:WhichKeyDesc_fold_expandall = "-- Expand all folds"
nnoremap ze :action ExpandAllRegions<cr>
let g:WhichKeyDesc_fold_toggle = "za Toggle fold under the cursor"
nnoremap zt :action ExpandCollapseToggleAction<cr>

"  Actions
let g:WhichKeyDesc_action= "<leader>a Actions"

let g:WhichKeyDesc_action_context_menu = "<leader>am Open context menu"
map <leader>am <action>(ShowIntentionActions)
let g:WhichKeyDesc_comment = "<leader>ac Comment line"
map <leader>ac <action>(CommentByLineComment)
map <leader>ar <action>(Run)
map <leader>ad <action>(Debug)
let g:WhichKeyDesc_action_search = "<leader>as Open command modal"
map <leader>as <action>(Stop)
map <leader>at <action>(RunAllTest)
map <leader>ao <action>(RiderOpenSolution)
map <leader>an <action>(RiderNuGetToggleToolWindowAction)
map <leader>aq <action>(Console.Jdbc.Execute)

" Go to code
let g:WhichKeyDesc_goto = "g Go to X"

map gd <Action>(GotoDeclaration)
map gy <Action>(GotoTypeDeclaration)
map gi <Action>(GotoImplementation)
map gu <Action>(ShowUsages)
map gt <Action>(GotoTest)
let g:WhichKeyDesc_goto_back = "<leader>gb Go Back"
map gb <Action>(Back)
map gf <Action>(Forward)

" Harpoon go to
map gn :action GotoHarpoon1
map ge :action GotoHarpoon2
map gi :action GotoHarpoon3
map go :action GotoHarpoon4

" Harpoon
let g:WhichKeyDesc_harpoon = "<leader>h Harpoon"

let g:WhichKeyDesc_set_harpoon = "<leader>hs Set harpoon" 

let g:WhichKeyDesc_goto_harpoon = "<leader>hg Goto harpoon" 
map <leader>hn :action SetHarpoon1<cr>
map <leader>he :action SetHarpoon2<cr>
map <leader>hi :action SetHarpoon3<cr>
map <leader>ho :action SetHarpoon4<cr>
"nmap <leader>hg5 :action SetHarpoon5<cr>

map <leader>hh :action ShowHarpoon<cr>
map <leader>ha :action AddToHarpoon<cr>

" Tools
let g:WhichKeyDesc_tools= "<leader>t Tools"

map <leader>tt :!alacritty &<CR>
map <leader>tf :action ActivateProjectToolWindow<CR>
map <leader>td :action ActivateDatabaseToolWindow<CR>
"nmap <leader>th :action HideActiveWindows<CR>
map <leader>th :action HideAllWindows<CR>
map <leader>ts :action ShowSettings<CR>
map <leader>te :action ActivateProblemsViewToolWindow<CR>

" Vim
map <leader>qr :action IdeaVim.ReloadVimRc.reload<CR>
map <leader>qo :e ~/.ideavimrc<CR>

" Context
let g:WhichKeyDesc_code_generation = "<leader>context" 

map <leader>ya <Action>(ShowIntentionActions)
map <leader>yh <action>(ShowHoverInfo)
